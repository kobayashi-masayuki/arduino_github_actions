name: Bump Version

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'どちらのバージョンを上げますか？'
        required: true
        default: 'minor'
        type: choice
        options:
          - major
          - minor

permissions:
  contents: write

jobs:
  bump:
    name: Bump version & Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure version.txt exists
        run: |
          test -f version.txt || (echo "version.txt not found" && exit 1)

      - name: Read current version
        id: read_ver
        run: |
          ver=$(cat version.txt)
          echo "ver=$ver" >> $GITHUB_OUTPUT

      - name: Sync code version
        run: |
          # release/release.ino の const double current_version を置換
          sed -i -E \
            "s|(const double current_version *= *)[0-9]+\.[0-9]+(;)|\1${{ steps.read_ver.outputs.ver }}\2|" \
            release/release.ino

      - name: Commit synced version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: sync current_version to v${{ steps.read_ver.outputs.ver }}"
          file_pattern: release/release.ino

      - name: Calculate next version
        id: bump_ver
        run: |
          IFS='.' read -r MAJ MIN <<< "${{ steps.read_ver.outputs.ver }}"
          if [ "${{ github.event.inputs.version_type }}" = "major" ]; then
            MAJ=$((MAJ + 1))
            MIN=0
          else
            MIN=$((MIN + 1))
          fi
          NEW_VER="${MAJ}.${MIN}"
          echo "$NEW_VER" > version.txt
          echo "newver=$NEW_VER" >> $GITHUB_OUTPUT

      - name: Commit bumped version
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: bump version to v${{ steps.bump_ver.outputs.newver }}"
          file_pattern: version.txt

      - name: Push commit & create tag
        run: |
          git push origin HEAD:refs/heads/main
          TAG="v${{ steps.bump_ver.outputs.newver }}"
          if git rev-parse --verify "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi