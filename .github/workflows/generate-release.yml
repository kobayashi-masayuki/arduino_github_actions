# .github/workflows/generate-release.yml
name: Generate Release

on:
    workflow_run:
      workflows:
        - Create Tag
      types:
        - completed

permissions:
  contents: write
  packages: write

jobs:
  prepare:
    name: Prepare release data
    runs-on: ubuntu-latest
    outputs:
      current_tag: ${{ steps.pick_tag.outputs.current_tag }}
      prev_tag:    ${{ steps.find_prev.outputs.prev_tag }}
      notes:       ${{ steps.make_notes.outputs.notes }}
      already_released: ${{ steps.check_release.outputs.exists }}
    steps:
      # リポジトリをフルヒストリ＆タグ込みでチェックアウト
      - name: Checkout repo (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # 現在プッシュされたタグ名を取得
      - name: Determine current tag
        id: pick_tag
        run: |
          # GITHUB_REF が refs/tags/vX.Y の形式なのでプレフィックスを削除
          TAG="${GITHUB_REF#refs/tags/}"
          echo "current_tag=$TAG" >> $GITHUB_OUTPUT

      # 直前のタグを取得
      - name: Determine previous tag
        id: find_prev
        run: |
          PREV=$(git tag --sort=-v:refname \
            | grep -v "^${{ steps.pick_tag.outputs.current_tag }}$" \
            | head -n1)
          echo "prev_tag=$PREV" >> $GITHUB_OUTPUT

      # 既に同名リリースが存在するかチェック
      - name: Check if release exists
        id: check_release
        run: |
          if gh release view "${{ steps.pick_tag.outputs.current_tag }}" >/dev/null 2>&1; then
            echo "exists=true"  >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      # リリースノート生成
      - name: Generate release notes
        id: make_notes
        run: |
          RANGE="${{ steps.find_prev.outputs.prev_tag }}..${{ steps.pick_tag.outputs.current_tag }}"
          LOG=$(git log "$RANGE" --pretty=format:"- %s")
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG"       >> $GITHUB_OUTPUT
          echo "EOF"        >> $GITHUB_OUTPUT

  create:
    name: Create GitHub Release & Attach Binaries
    needs: prepare
    runs-on: ubuntu-latest
    # まだリリースが存在しない場合のみ実行
    if: needs.prepare.outputs.already_released == 'false'
    steps:
      # 再度リポジトリをフルヒストリ＆タグ込みでチェックアウト
      - name: Checkout repo (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      # GitHub Release 作成
      - name: Create GitHub Release
        id: create_rel
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:     ${{ needs.prepare.outputs.current_tag }}
          release_name: Release ${{ needs.prepare.outputs.current_tag }}
          body:         ${{ needs.prepare.outputs.notes }}
          draft:        false
          prerelease:   false

      # Arduino CLI セットアップ
      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        with:
          version: '1.2.2'
          token:   ${{ secrets.GITHUB_TOKEN }}

      # ESP32 プラットフォームインストール
      - name: Install ESP32 platform
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      # スケッチビルド
      - name: Build sketch for release
        run: |
          mkdir -p release/build
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            --build-path release/build \
            release/release.ino

      # バイナリを ZIP 化
      - name: Package binaries
        run: |
          zip -j release-${{ needs.prepare.outputs.current_tag }}.zip release/build/*

      # Release へアセットアップロード
      - name: Upload assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:        ${{ steps.create_rel.outputs.upload_url }}
          asset_path:        release-${{ needs.prepare.outputs.current_tag }}.zip
          asset_name:        release-${{ needs.prepare.outputs.current_tag }}.zip
          asset_content_type: application/zip