name: Generate Release

# bump-version.yml の完了を待って自動実行
on:
  workflow_run:
    workflows:
      - Bump Version       # bump-version.yml の name と一致させる
    types:
      - completed

permissions:
  contents: write

jobs:
  create:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Determine tag just created
        id: pick_tag
        run: |
            TAG=$(git tag --sort=-v:refname | head -n1)
            echo "current_tag=$TAG" >> $GITHUB_OUTPUT

      - name: Determine previous tag
        id: find_prev
        run: |
            # 最新タグを除いた一覧の先頭が「直前のタグ」
            PREV=$(git tag --sort=-v:refname | grep -v "^${{ steps.pick_tag.outputs.current_tag }}$" | head -n1)
            echo "prev_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Check if Release exists
        id: check_release
        run: |
          if gh release view "${{ steps.pick_tag.outputs.tag }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if already released
        if: ${{ steps.check_release.outputs.exists == 'true' }}
        run: |
          echo "Release ${{ steps.pick_tag.outputs.tag }} already exists. Exiting."

      - name: Generate release notes
        id: notes
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        run: |
          RANGE="${{ steps.find_prev.outputs.prev_tag }}..${{ steps.pick_tag.outputs.current_tag }}"
          LOG=$(git log "$RANGE" --pretty=format:"- %s")
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_rel
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.pick_tag.outputs.tag }}
          release_name: Release ${{ steps.pick_tag.outputs.tag }}
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: false

      - name: Setup Arduino CLI
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        uses: arduino/setup-arduino-cli@v2
        with:
          version: '1.2.2'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install ESP32 platform
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      - name: Build sketch for release
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        run: |
          mkdir -p release/build
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            --build-path release/build \
            release/release.ino

      - name: Package and upload binaries
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        run: |
          zip -j release-${{ steps.pick_tag.outputs.tag }}.zip release/build/*
      - name: Upload assets
        if: ${{ steps.check_release.outputs.exists == 'false' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_rel.outputs.upload_url }}
          asset_path: release-${{ steps.pick_tag.outputs.tag }}.zip
          asset_name: release-${{ steps.pick_tag.outputs.tag }}.zip
          asset_content_type: application/zip