# .github/workflows/release.yml
name: Release Automation

on:
  pull_request:
    # PRが閉じたタイミングで実行
    types:
      - closed
    # mainブランチのみを対象とする
    branches:
      - main

permissions:
  contents: read

env:
  SKETCH_DIR: release

jobs:
  release:
    permissions:
      # write permission is required to create a github release
      contents: write
      # リリースノートを書くためwrite用のpermissionを付与
      pull-requests: write
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release')
    runs-on: ubuntu-latest

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TZ: "Asia/Tokyo"

    steps:
      - uses: actions/checkout@v4

      # 前回のリリースタグを取得する
      - name: Get previous tag
        id: pre_tag
        run: |
          echo "pre_tag=$(curl -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)" >> $GITHUB_OUTPUT

      # タグを生成する。バージョンファイルの内容をもとに、生成する。例： v4.10
      - name: Generate tag
        id: release_tag
        run: |
          release_version=$(cat version.txt | tr -d '\n')
          echo "release_tag=$release_version" >> $GITHUB_OUTPUT

      # PRのDescriptionを取得しマークダウン形式に変換する
      - name: Get pr description
        id: pr_description
        run: |
          echo "pr_description=$(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            'https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number}}' \
            | jq .body | awk '{if ($0 == "null") print ""; else print}')" >> $GITHUB_OUTPUT

      # 前回リリースからの差分をもとに、変更点を取得する
      - name: Generate release note changes
        id: changes
        run: |
          echo "changes=$(
          curl -X POST \
            -H 'Accept: application/vnd.github.v3+json' \
            -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{
              "tag_name": "${{ steps.release_tag.outputs.release_tag }}",
              "previous_tag_name": "${{ steps.pre_tag.outputs.pre_tag }}",
              "target_commitish": "main"
            }' | jq .body
          )" >> $GITHUB_OUTPUT

      # リリースノートの本文を作成する
      - name: Create release note body
        id: release_note_body
        run: |
          echo "release_note_body=$(echo \
            ${{ steps.pr_description.outputs.pr_description }} \
            ${{ steps.changes.outputs.changes }} \
            | sed 's/\\"//g' | sed 's/["“]//g')" >> $GITHUB_OUTPUT

      # タグを切り、リリースノートを作成する
      - name: Create Release
        id: create_release
        run: |
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{ \
              \"tag_name\": \"${{ steps.release_tag.outputs.release_tag }}\", \
              \"target_commitish\": \"main\", \
              \"name\": \"${{ steps.release_tag.outputs.release_tag }}\", \
              \"body\": \"${{ steps.release_note_body.outputs.release_note_body }}\" \
            }" \
            -w "%{http_code}" \
            -o response_body.txt \
            https://api.github.com/repos/${{ github.repository }}/releases)
            status_code=$(tail -n1 <<< "$response")
            echo "Status Code: $status_code"
            echo "$response" > response.json
            # upload_url に含まれる {?name,label} 部分は不要なので取り除く
            upload_url=$(jq -r .upload_url response.json | sed 's/\{\?name,label\}$//')
            release_id=$(jq -r .id response.json)
            echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
            echo "release_id=$release_id" >> $GITHUB_OUTPUT

      # ── ここからバイナリ生成＋アセットアップロード ──

      - name: Setup Arduino CLI
        uses: arduino/setup-arduino-cli@v2
        with:
          version: '1.2.2'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install ESP32 platform
        run: |
          arduino-cli core update-index
          arduino-cli core install esp32:esp32

      - name: Build release sketch
        run: |
          mkdir -p ${env.SKETCH_DIR}/build
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            --build-path ${env.SKETCH_DIR}/build \
            ${env.SKETCH_DIR}/release.ino

      - name: Rename release binary
        run: |
          mkdir -p release-${{ steps.release_tag.outputs.release_tag }}
          mv ${env.SKETCH_DIR}/build/${env.SKETCH_DIR}.ino.bin release-${{ steps.release_tag.outputs.release_tag }}/firmware.bin

      - name: Create ZIP archive
        run: |
          zip -r release-${{ steps.release_tag.outputs.release_tag }}.zip release-${{ steps.release_tag.outputs.release_tag }} version.txt

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-${{ steps.release_tag.outputs.release_tag }}.zip
          asset_name: release-${{ steps.release_tag.outputs.release_tag }}.zip
          asset_content_type: application/zip